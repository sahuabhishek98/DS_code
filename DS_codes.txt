===========================================================
Two sum : [1,2,3,4]  ,7 output =[2,3]
===========================================================
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++){
           for(int j=i+1;j<nums.length;j++){
            if(nums[i] == target - nums[j]){
                return  new int[] {i,j};
            }
        }
       }
        return null;
    }
}

============================================================
Binary search:
==========================================================
class Solution {
    public int search(int[] nums, int target) {
        int left=0;
         int   right=(nums.length-1);
         int mid;
        while(left<=right){
        mid=(left+right)/2;
        if(target == nums[mid]){
            return mid;
        }
        else if(target <nums[mid]){
            right=mid-1;
        }
        else {
            left=mid+1;
        }
             
    }
       return -1;
    }
}

============================================================
palindrome:
=============================================================
class Solution {
    public boolean isPalindrome(int x) {
        int original=x;
        if(x<0 || (x%10 ==0 && x!=0)){
            return false;
        }
        int c=0,a;
        while(x!=0){
         a=x%10;
         c=c *10 + a;
         x /=10;     
        }      
        if(c==original){
            return true;
        }
        return false;
    }
}
===============================================================
Squares of a Sorted Array: Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
=========================================================
class Solution {
    public int[] sortedSquares(int[] nums) {
        for(int i=0;i<nums.length;i++){
             nums[i]=nums[i]* nums[i];
        }
        Arrays.sort(nums);
        return nums;
    }
}
========================================================
rotate array with times:Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
=======================================================================
code 1: (time complexity problem)
class Solution {
    public void rotate(int[] nums, int k) {
        int i,j,last;
        int l=nums.length;
        for( i=0;i<k;i++){
             last=nums[(l-1)];
            for(j=(l-1);j>0;j--){
               nums[j]=nums[j-1]; 
            }
            nums[0]=last;
        }
    }
}
-----------------code 2: -----------------------------------------------
class Solution {
    public void rotate(int[] nums, int k) {
        k=k %nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums, k,nums.length-1);     
    }
    public void  reverse(int[] nums, int low, int high){
        while(low<high){
            int temp=nums[low];
            nums[low]=nums[high];
            nums[high]=temp;
            low++;
            high--;
        }
    }
}
============================================================================
Roman to Integer:
=========================================================================

class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> m = new HashMap();
        m.put('I',1);
         m.put('V',5);
         m.put('X',10);
        m.put('L',50);
         m.put('C',100);
         m.put('D',500);
         m.put('M',1000);
        
        int res=0;
        for(int i=0;i<s.length();i++){
        if(i>0 && m.get(s.charAt(i)) > m.get(s.charAt(i-1))){
            res +=m.get(s.charAt(i)) -2* m.get(s.charAt(i-1));
        }
         else{
                 res+=m.get(s.charAt(i));
         }
    }
    return res;
}
===============================================================================
Count Odd Numbers in an Interval Range:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].
===============================================================================
class Solution {
    public int countOdds(double low, double high) {
        int count=0;
        if(low%2==0 && high %2==0)
            count+=(high-low)/2;
        else if(low%2==1 && high %2==0)
            count+=((high-low)/2)+1;
        else if(low%2==0 && high %2==1)
            count+=((high-low)/2)+1;
        else if(low%2==1 && high %2==1)
            count+=((high-low)/2)+1;
        return count;
        
        
    }
}
=================================================================================
Average Salary Excluding the Minimum and Maximum Salary:
Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500
================================================================================
class Solution {
    public double average(int[] salary) {
        Arrays.sort(salary);
        double total=0.0;
        for(int i=1;i<=(salary.length-2);i++){
        total+=salary[i];
        }
          return total/(salary.length-2);
       
    }
    
}
=============================================================================
Moves Zero:Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
===============================================================
class Solution {
    public void moveZeroes(int[] nums) {
        int i=0,j=0;
    while(i<nums.length)
    {
        if(nums[i]==0)
        {     
            i++;
        }
        else
        {
            nums[j]=nums[i];
            i++;
            j++;
        }
    }
    while(j<nums.length)
    {
        nums[j]=0;
        j++;
    }
}
    }
==========================================================
 Two Sum II - Input Array Is Sorted
===========================================================
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int i = 0;
        int j = numbers.length - 1;
        while(i < j){
            if(numbers[i] + numbers[j] < target){
                i++;
            }
            else if(numbers[i] + numbers[j] > target){
                j--;
            }
            else{
                break;
            }
        }
        return new int[]{i+1, j+1};
    }
}
========================================================
Number of 1 Bits:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
======================================================================
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {     
   return Integer.bitCount(n);
    }
}
-------------------code 2------------------------
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
    int ans=0;
        for(int i=0;i<=32;i++){
            if(n%2!=0)
            ans++;
            n/=2;
            
        }
        return ans;
    }
}
==============================================================
Subtract the Product and Sum of Digits of an Integer:
Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15
=================================================================
while (n !=0) {
           int r = n%10;
           sum += r;
           product *=r;
           n = n/10;
       } 
       return product-sum; 
=================================================================
reverse the string:Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
==========================================================
class Solution {
    public String reverseWords(String s) {
        char[] s1 = s.toCharArray();
        int i = 0;
for(int j = 0; j < s1.length; j++)
{
if(s1[j] == ' ')
{
reverse(s1, i, j - 1);
i = j + 1;
}
}
reverse(s1, i, s1.length - 1);
        return new String(s1);
    }

    
  public void  reverse(char[] arr, int start, int end) {
        while(start < end) { 
            char temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            
            start++;
            end--;
    }
}
}
==========================================================
Largest Perimeter Triangle:
==========================================================
class Solution {
    public int largestPerimeter(int[] nums) {
        Arrays.sort(nums);
        for (int i = nums.length - 3; i >= 0; --i){
            if (nums[i] + nums[i+1] > nums[i+2])
                return nums[i] + nums[i+1] + nums[i+2];}
        return 0;
    }
}
======================================================
Middle of the Linked List:Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
================================================================
class Solution {
    public ListNode middleNode(ListNode head) {
       ListNode[] A = new ListNode[100];
        int t = 0;
        while (head != null) {
            A[t++] = head;
            head = head.next;
        }
        return A[t/2];
        
    }
}
==============================================================
Longest Substring Without Repeating Characters:Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
================================================================
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int start =0;
        int end = 0;  
        int max=0;
        
        HashSet<Character> hs= new HashSet();
        while(end<s.length()){
            if(!hs.contains(s.charAt(end))){
                hs.add(s.charAt(end));
                end++;
                max= Math.max(hs.size(),max);
            }else{
                hs.remove(s.charAt(start));
                start++;
            }
        }
        return max;
    }
}
==============================================================

